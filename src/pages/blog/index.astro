---
import clsx from "clsx";
import { actions } from "astro:actions";
import H1 from "../../components/h1.astro";
import { formatDate } from "../../lib/utils";
import InfoLayout from "../../layouts/InfoLayout.astro";

const selectedCategoriesParam = Astro.url.searchParams.get("categories") || "";
const selectedCategories = selectedCategoriesParam ? selectedCategoriesParam.split(",") : [];
const currentPage = parseInt(Astro.url.searchParams.get("page") || "1");
const categoriesResult = await Astro.callAction(actions.categories.getAllCategories, null);
const allCategories = categoriesResult?.data?.categories || [];
const articlesResult = await Astro.callAction(actions.categories.getArticles, {
    categories: selectedCategories,
    page: currentPage,
    limit: 10
});

if (articlesResult?.error) {
    console.log("error", articlesResult.error);
}

const { articles, pagination } = articlesResult?.data || { articles: [], pagination: {} };

const buildUrl = (page?: number, categories?: string[]) => {
    const params = new URLSearchParams();
    if (categories && categories.length > 0) params.set("categories", categories.join(","));
    if (page && page > 1) params.set("page", page.toString());
    return params.toString() ? `/blog?${params.toString()}` : "/blog";
};
---

<InfoLayout>
    <div class="p-4 sm:pt-8 sm:px-12 pb-20 min-h-dvh">
        <H1> Blog </H1>

        <ul class="mt-4 flex items-center gap-4 flex-wrap">
            <li>
                <a href="/blog" class={clsx("w-fit px-4 py-1 text-sm bg-transparent rounded-full transition-all duration-300 ease-in-out",
                    selectedCategories.length === 0 ? "text-white bg-zinc-100/20 outline-2 outline-offset-2 outline-zinc-100/20" : "text-zinc-400 hover:text-zinc-300"
                )}>
                    All
                </a>
            </li>

            {
                allCategories.map((category) => {
                    const isSelected = selectedCategories.includes(category.toLowerCase());
                    const toggledCategories = isSelected
                        ? selectedCategories.filter(c => c !== category.toLowerCase())
                        : [...selectedCategories, category.toLowerCase()];

                    return (
                        <li>
                            <a
                                href={buildUrl(1, toggledCategories)}
                                class={clsx("w-fit px-4 py-1 text-sm bg-transparent rounded-full transition-all duration-300 ease-in-out",
                                    isSelected ? "text-white bg-zinc-100/20 outline-2 outline-offset-2 outline-zinc-100/20" : "text-zinc-400 hover:text-zinc-200"
                                )}
                            >
                                {category}
                            </a>
                        </li>
                    );
                })
            }
        </ul>

        <ul class="mt-4 space-y-6">
            {
                articles.map((article) => (
                    <li>
                        <a
                            class="space-y-1 group"
                            href={`/blog/${article.data.slug}`}
                        >
                            <h2 class="text-xl xl:text-2xl text-zinc-300 group-hover:text-white text-balance font-medium underline group-hover:underline-offset-2 decoration-transparent group-hover:decoration-zinc-500">
                                {article.data.title}
                            </h2>
                            <p class="text-base text-zinc-400">
                                {article.data.snippet}
                            </p>
                            <p class="text-sm text-zinc-500">
                                {formatDate(article.data.pubDate)} &middot;{" "}
                                {article.data.author}
                            </p>
                        </a>
                    </li>
                ))
            }
        </ul>

        {/* Pagination UI */}
        {
            pagination.totalPages > 1 && (
                <div class="mt-12 flex items-center justify-center gap-4">
                    {
                        pagination.hasPrevPage && (
                            <a
                                href={buildUrl(currentPage - 1, selectedCategories)}
                                class="px-4 py-2 text-sm text-zinc-400 hover:text-zinc-200 transition-colors"
                            >
                                ← Previous
                            </a>
                        )
                    }

                    <span class="text-sm text-zinc-500">
                        Page {pagination.currentPage} of {pagination.totalPages}
                    </span>

                    {
                        pagination.hasNextPage && (
                            <a
                                href={buildUrl(currentPage + 1, selectedCategories)}
                                class="px-4 py-2 text-sm text-zinc-400 hover:text-zinc-200 transition-colors"
                            >
                                Next →
                            </a>
                        )
                    }
                </div>
            )
        }
    </div>
</InfoLayout>
